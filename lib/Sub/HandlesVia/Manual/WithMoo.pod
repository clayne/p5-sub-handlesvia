=pod

=encoding utf-8

=head1 NAME

Sub::HandlesVia::Manual::WithMoo - using Sub::HandlesVia with Moo

=head1 SYNOPSIS

 package Kitchen {
   use Moo;
   use Sub::HandlesVia;
   use Types::Standard qw( ArrayRef Str );
   
   has food => (
     is          => 'ro',
     isa         => ArrayRef[Str],
     handles_via => 'Array',
     default     => sub { [] },
     handles     => {
       'add_food'    => 'push',
       'find_food'   => 'grep',
     },
   );
 }

=head1 MANUAL

Sub::HandlesVia allows you to delegate methods from your class to the
values of your objects' attributes.

Conceptually, it allows you to define C<< $object->push_number($n) >>
to be a shortcut for C<< $object->numbers->push($n) >> except that
C<< $object->numbers >> is an arrayref, so doesn't have methods you
can call on it like C<push>.

You should be able to use Sub::HandlesVia as a drop-in replacement for
L<MooX::HandlesVia>, which provides a similar feature, though has a more
limited implementation. Sub::HandlesVia honours type constraints, plus it
can mutate non-reference values.

=head2 Which Methods Can Be Delegated To?

The C<handles_via> option indicates which library of methods should be
available. Valid values include
L<Array|Sub::HandlesVia::HandlerLibrary::Array>,
L<Blessed|Sub::HandlesVia::HandlerLibrary::Blessed>,
L<Bool|Sub::HandlesVia::HandlerLibrary::Bool>,
L<Code|Sub::HandlesVia::HandlerLibrary::Code>,
L<Counter|Sub::HandlesVia::HandlerLibrary::Counter>,
L<Hash|Sub::HandlesVia::HandlerLibrary::Hash>,
L<Number|Sub::HandlesVia::HandlerLibrary::Number>,
L<Scalar|Sub::HandlesVia::HandlerLibrary::Scalar>, and
L<String|Sub::HandlesVia::HandlerLibrary::String>.

An arrayref can be provided for C<handles_via>, though many of the options
are conceptually contradictory.

 handles_via => [ 'Number', 'Scalar' ]

=head1 BUGS

Please report any bugs to
L<https://github.com/tobyink/p5-sub-handlesvia/issues>.

=head2 Potential load order bugs

Unlike L<Moose>, Moo doesn't really offer much of an API for extensions.
As a result, most modules that provide extensions do so by wrapping the
Moo keywords (especially C<has>). Sub::HandlesVia is no exception to this.
If you are using multiple Moo extensions, you may need to adjust the order
you C<use> them for them to work properly together. In some combinations,
there may be no order that fully works!

Some known modules that should be imported I<before> Sub::HandlesVia if
you're using them: L<MooX::Should>.

Some known modules that should be imported I<after> Sub::HandlesVia if
you're using them: L<MooX::ProtectedAttributes>.

Some known modules that conflict with Sub::HandlesVia: none so far!

=head1 SEE ALSO

Misc advanced documentation:
L<Sub::HandlesVia::Manual::Advanced>.

L<Sub::HandlesVia>.

Documentation for delegatable methods:
L<Sub::HandlesVia::HandlerLibrary::Array>,
L<Sub::HandlesVia::HandlerLibrary::Blessed>,
L<Sub::HandlesVia::HandlerLibrary::Bool>,
L<Sub::HandlesVia::HandlerLibrary::Code>,
L<Sub::HandlesVia::HandlerLibrary::Counter>,
L<Sub::HandlesVia::HandlerLibrary::Hash>,
L<Sub::HandlesVia::HandlerLibrary::Number>,
L<Sub::HandlesVia::HandlerLibrary::Scalar>, and
L<Sub::HandlesVia::HandlerLibrary::String>.

=head1 AUTHOR

Toby Inkster E<lt>tobyink@cpan.orgE<gt>.

=head1 COPYRIGHT AND LICENCE

This software is copyright (c) 2022 by Toby Inkster.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

